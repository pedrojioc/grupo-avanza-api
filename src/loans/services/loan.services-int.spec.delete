import { Test, TestingModule } from '@nestjs/testing'
import { TypeOrmModule } from '@nestjs/typeorm'
import { DataSource } from 'typeorm'
import { LoansService } from 'src/loans/services/loans.service'
import { Loan } from 'src/loans/entities/loan.entity'
import { LoanRepository } from 'src/loans/repositories/loan.repository'
import { CreateLoanDto } from 'src/loans/dtos/loans.dto'
import { Customer } from 'src/customers/entities/customer.entity'

import { FinancialActivity } from 'src/customers/entities/financial-activity.entity'
import { Employee } from 'src/employees/entities/employee.entity'
import { Position } from 'src/employees/entities/position.entity'
import { User } from 'src/users/entities/user.entity'
import { Role } from 'src/roles/entities/role.entity'
import { Option } from 'src/menu/entities/option.entity'
import { Menu } from 'src/menu/entities/menu.entity'
import { EmployeeBalance } from 'src/employees/entities/employee-balance.entity'
import { PaymentPeriod } from '../entities/payment-period.entity'
import { LoanState } from '../entities/loan-state.entity'
import { CustomersService } from 'src/customers/services/customers.service'
import { EmployeesService } from 'src/employees/services/employees.service'
import { PaymentsService } from '../modules/payments/payments.service'
import { LoanFactoryService } from './loan-factory.service'
import { FinancialActivityService } from 'src/customers/services/financial-activity.service'
import { PositionsService } from 'src/employees/services/positions.service'
import { LoanManagementService } from '../modules/loans-management/loans-management.service'
import { InstallmentsService } from '../modules/installments/installments.service'
import { InterestsService } from '../modules/interests/interests.service'
import { Interest } from '../entities/interest.entity'
import { Installment } from '../entities/installment.entity'

describe('LoansService - Integration Test', () => {
  let service: LoansService
  let dataSource: DataSource

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      imports: [
        TypeOrmModule.forRoot({
          type: 'sqlite',
          database: ':memory:', // Usamos SQLite en memoria
          entities: [
            Loan,
            Customer,
            FinancialActivity,
            Employee,
            Position,
            User,
            Role,
            Option,
            Menu,
            EmployeeBalance,
            PaymentPeriod,
            LoanState,
          ],
          synchronize: true,
        }),
        TypeOrmModule.forFeature([
          Loan,
          Customer,
          Employee,
          FinancialActivity,
          Position,
          Interest,
          Installment,
        ]),
      ],
      providers: [
        LoansService,
        LoanRepository,
        CustomersService,
        EmployeesService,
        PaymentsService,
        LoanFactoryService,
        FinancialActivityService,
        PositionsService,
        LoanManagementService,
        InterestsService,
        InstallmentsService,
      ],
    }).compile()

    service = module.get<LoansService>(LoansService)
    dataSource = module.get<DataSource>(DataSource)
  })

  afterEach(async () => {
    // const queryRunner = dataSource.createQueryRunner()
    // await queryRunner.query('DELETE FROM loans') // Limpia la tabla después de cada test
    // await queryRunner.release()
  })

  it('should create and save a loan in the database', async () => {
    const createLoanDto: CreateLoanDto = {
      amount: 1000,
      customerId: 1,
      employeeId: 1,
      loanStateId: 1,
      paymentPeriodId: 1,
      interestRate: 0,
      installmentsNumber: 0,
      startAt: new Date(),
      endAt: new Date(new Date().setMonth(12)),
    }

    const result = await service.create(createLoanDto)

    expect(result).toHaveProperty('id') // Verifica que el préstamo fue creado y tiene un id
    expect(result.amount).toEqual(1000)

    const savedLoan = await service.findOne(1)
    expect(savedLoan).toBeDefined()
    expect(savedLoan.amount).toBe(1000)
  })
})
